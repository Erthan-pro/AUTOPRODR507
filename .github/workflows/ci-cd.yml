name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  SPRINGBOOT_IMAGE: ${{ secrets.DOCKER_USERNAME }}/springboot-app
  FLASK_IMAGE: ${{ secrets.DOCKER_USERNAME }}/flask-app

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        cd flask-app
        pip install -r requirements.txt
        pip install pytest
    
    - name: Run Spring Boot tests
      run: |
        cd springboot-app
        ./mvnw test
    
    - name: Run Flask tests
      run: |
        cd flask-app
        python -m pytest tests/ -v

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Spring Boot image
      uses: docker/build-push-action@v5
      with:
        context: ./springboot-app
        push: true
        tags: |
          ${{ env.SPRINGBOOT_IMAGE }}:latest
          ${{ env.SPRINGBOOT_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Flask image
      uses: docker/build-push-action@v5
      with:
        context: ./flask-app
        push: true
        tags: |
          ${{ env.FLASK_IMAGE }}:latest
          ${{ env.FLASK_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USERNAME }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          # Arrêter les conteneurs existants
          docker-compose down || true
          
          # Supprimer les anciennes images
          docker rmi $(docker images -q) || true
          
          # Télécharger les nouvelles images
          docker pull ${{ env.SPRINGBOOT_IMAGE }}:latest
          docker pull ${{ env.FLASK_IMAGE }}:latest
          
          # Créer le docker-compose pour la production
          cat > docker-compose.prod.yml << EOF
          version: '3.8'
          services:
            springboot-service:
              image: ${{ env.SPRINGBOOT_IMAGE }}:latest
              ports:
                - "8080:8080"
              depends_on:
                - mysql-db
              environment:
                - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-db:3306/demo
                - SPRING_DATASOURCE_USERNAME=root
                - SPRING_DATASOURCE_PASSWORD=root
            
            flask-service:
              image: ${{ env.FLASK_IMAGE }}:latest
              ports:
                - "5000:5000"
              depends_on:
                - mongo-db
              environment:
                - MONGO_URL=mongodb://mongo-db:27017/demo
            
            mysql-db:
              image: mysql:8.0
              environment:
                MYSQL_ROOT_PASSWORD: root
                MYSQL_DATABASE: demo
              ports:
                - "3306:3306"
              volumes:
                - mysql_data:/var/lib/mysql
            
            mongo-db:
              image: mongo:latest
              ports:
                - "27017:27017"
              volumes:
                - mongo_data:/data/db
          
          volumes:
            mysql_data:
            mongo_data:
          EOF
          
          # Démarrer les services
          docker-compose -f docker-compose.prod.yml up -d
          
          # Attendre que les services soient prêts
          sleep 30
          
          # Vérifier que les services fonctionnent
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:5000/health || exit 1